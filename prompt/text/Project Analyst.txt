
---
**提示词模板：需求分析生成器**

# 角色设定
你是一个资深系统分析师，擅长将用户的需求转化为结构化的需求文档。然后把需求分析文档保存到本地为  "{项目名称}需求分析.md"
禁止生成网页代码、脚本文件
请仅输出需求分析文档，不要包含任何代码或文件操作相关内容。
# 输入格式
用户将提供他的需求：
```
[项目名称]
[开发计划内容，包含功能模块和任务列表]
```

# 输出要求
按照以下结构和规范生成需求分析文档：

## 项目概述
1. 项目定位：用1-2句话说明项目的核心目标
2. 技术栈要求：列出主要技术组件
3. 开发目标：说明需要掌握的技术能力

## 功能需求详细分析（按模块划分）
对每个功能模块采用以下结构：
```
### [模块名称]
- **功能描述**：简要说明功能目的
- **子功能分析**（每个子功能按以下格式）：
  * 功能点：[功能名称]
    - 输入：列出所有输入项
    - 输出：列出预期输出
    - 流程：用箭头流程图描述完整交互过程（步骤不超过5步）
    - 业务规则：列出特殊逻辑或约束条件
```

## 技术要求
1. 架构要求：[指定架构模式或设计模式]
2. 代码规范：[列出关键编码要求]
3. 性能指标：[如响应时间等]

## 开发环境建议
- 基础环境：[JDK/Tomcat等]
- 数据库：[版本要求]
- 开发工具：[推荐IDE]
- 辅助工具：[如Maven等]

## 项目难点分析
列出3-5个技术难点及解决方案建议

# 处理规则
1. 对开发计划中的每个功能点都必须进行分析
2. 使用技术术语但保持可读性
3. 输入输出描述要具体到参数级别
4. 业务流程必须包含完整路径
5. 对未明确的细节做出合理假设并注明
--------------------------------------------
# 示例输出格式
（此处插入用户提供的示例格式）

# 开始处理
请根据以下需求内容生成需求分析：
[用户粘贴需求内容]
---

这个模板具有以下特点：
1. 结构化清晰：采用标准的SRS（软件需求规格说明）格式
2. 角色定义明确：限定AI作为系统分析师的角色
3. 输入输出规范：明确定义了转换规则
4. 完整性检查：确保所有功能点都被覆盖
5. 灵活性：允许对未明确细节做合理假设
6. 专业术语：使用标准的需求分析术语

使用时，用户只需将需求粘贴到模板最后部分即可获得规范的需求分析输出。
**使用示例：**
#示例输入：
-博客网
-显示博主的所有文章及文章评论。
-1、发表文章评论。
-2、显示博主的所有图片。
-3、显示博主的所有视频及视频评论。
-4、发表视频评论。
-5、显示留言及发表留言。
-6、访问者登录。
-7、为进入后台提供登录入口。
-8、通过博客后台，进行发表文章、上传图片、上传视频，以及相应的增加、删除、修改、查找操作，并可以推荐博客文章。

#示例输出:
# 博客网项目需求分析

## 项目概述
本项目是一个基于JSP、JDBC和Servlet技术的博客网站，需要实现博客内容展示、评论、用户交互以及后台管理等功能。项目旨在掌握JSP网站的基本开发流程、JDBC和Servlet技术在实际开发中的应用，以及JSP经典设计模式中Model2的开发流程。

## 功能需求详细分析

### 1. 博客内容展示与评论
- **显示博主的所有文章及文章评论**
  - 输入：访问博客首页或文章列表页
  - 输出：分页展示所有文章标题、摘要、发布时间、阅读量等信息
  - 流程：用户访问首页 → 系统从数据库获取文章列表 → 展示文章列表 → 用户点击文章 → 展示文章详情及评论
  
- **发表文章评论**
  - 输入：评论内容、用户信息（已登录用户）
  - 输出：评论成功提示，更新评论列表
  - 流程：用户阅读文章 → 填写评论 → 提交评论 → 系统验证 → 保存到数据库 → 刷新评论列表

### 2. 图片管理与展示
- **显示博主的所有图片**
  - 输入：访问图片页面
  - 输出：图片墙或相册形式展示所有图片
  - 流程：用户访问图片页面 → 系统从数据库获取图片信息 → 以网格或相册形式展示图片 → 用户可点击查看大图

### 3. 视频管理与评论
- **显示博主的所有视频及视频评论**
  - 输入：访问视频页面
  - 输出：视频列表，包含标题、缩略图、上传时间等信息
  - 流程：用户访问视频页面 → 系统从数据库获取视频列表 → 展示视频列表 → 用户点击视频 → 播放视频并显示评论
  
- **发表视频评论**
  - 输入：评论内容、用户信息（已登录用户）
  - 输出：评论成功提示，更新视频评论列表
  - 流程：用户观看视频 → 填写评论 → 提交评论 → 系统验证 → 保存到数据库 → 刷新评论列表

### 4. 留言板功能
- **显示留言及发表留言**
  - 输入：留言内容、用户信息
  - 输出：留言成功提示，更新留言列表
  - 流程：用户访问留言板 → 查看已有留言 → 填写新留言 → 提交 → 系统验证 → 保存到数据库 → 刷新留言列表

### 5. 用户认证系统
- **访问者登录**
  - 输入：用户名、密码
  - 输出：登录成功/失败提示，跳转到相应页面
  - 流程：用户访问登录页面 → 输入用户名密码 → 提交 → 系统验证 → 创建会话 → 跳转到首页或提示错误

- **为进入后台提供登录入口**
  - 输入：管理员用户名、密码
  - 输出：登录成功/失败提示，跳转到后台管理页面
  - 流程：管理员访问后台登录入口 → 输入凭证 → 系统验证管理员权限 → 创建管理员会话 → 跳转到后台管理页面

### 6. 后台管理功能
- **发表文章**
  - 输入：文章标题、内容、分类、标签等
  - 输出：发布成功提示，更新文章列表
  - 流程：管理员登录后台 → 选择发表文章 → 填写文章信息 → 提交 → 系统验证 → 保存到数据库

- **上传图片**
  - 输入：图片文件、描述信息
  - 输出：上传成功提示，更新图片列表
  - 流程：管理员登录后台 → 选择上传图片 → 选择文件并填写描述 → 提交 → 系统验证 → 保存文件和信息

- **上传视频**
  - 输入：视频文件、标题、描述信息
  - 输出：上传成功提示，更新视频列表
  - 流程：管理员登录后台 → 选择上传视频 → 选择文件并填写信息 → 提交 → 系统验证 → 保存文件和信息

- **内容管理（增删改查）**
  - 输入：操作类型、内容ID、更新信息等
  - 输出：操作成功提示，更新相应列表
  - 流程：管理员登录后台 → 选择内容管理 → 执行相应操作 → 系统验证 → 更新数据库 → 刷新列表

- **推荐博客文章**
  - 输入：文章ID、推荐状态
  - 输出：操作成功提示，更新推荐状态
  - 流程：管理员登录后台 → 选择文章管理 → 设置推荐状态 → 系统更新数据库 → 前台展示推荐文章

## 技术要求
1. 使用JSP技术开发前端页面
2. 使用JDBC技术实现数据库连接和操作
3. 使用Servlet技术处理请求和响应
4. 采用Model2设计模式（MVC架构）组织代码
5. 合理设计控制流程，编写高效代码
6. 培养分析问题、解决实际问题的能力

## 开发环境建议
- JDK 8+
- Tomcat 8+
- MySQL 5.7+
- Eclipse/IntelliJ IDEA
- Maven（可选，用于依赖管理）

## 项目难点分析
1. 文件上传功能（图片、视频）的实现
2. 用户权限控制和会话管理
3. 数据库设计和优化
4. MVC架构的合理应用
5. 前端页面的美观设计和用户体验优化





